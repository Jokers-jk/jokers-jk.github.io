<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git学习笔记</title>
    <url>/2021/10/04/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>Git的基本语句指令并不难，而高深的部分对于我们这些一般人来说，日常的使用并不会涉及，最重要的是，其实我们每个人都会遗忘，忘了就再查，再学习呗，没有什么大不了的。</p>
<span id="more"></span>

<h1 id="Git学习资源"><a href="#Git学习资源" class="headerlink" title="Git学习资源"></a>Git学习资源</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<p>这个教程就可以满足我们绝大多人的需求了</p>
<h1 id="Git学习心得"><a href="#Git学习心得" class="headerlink" title="Git学习心得"></a>Git学习心得</h1><p>不得不说，Git的指令库，满足了我们的大部分需求，新建分支，版本回溯等等，Git就是为团队工作而生，虽然廖老师的讲解十分细致，指令部分也多次练习，但是不用还是会遗忘的，希望在日常的学习生活中，可以多多使用。</p>
<h1 id="Git的指令"><a href="#Git的指令" class="headerlink" title="Git的指令"></a>Git的指令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库） </span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名 </span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件 </span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色 </span><br><span class="line">git config --global color.status auto </span><br><span class="line">git config --global color.diff auto </span><br><span class="line">git config --global color.branch auto </span><br><span class="line">git config --global color.interactive auto </span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库 </span><br><span class="line">git status                                                # 查看当前版本状态（是否修改） </span><br><span class="line">git add xyz                                               # 添加xyz文件至index </span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index </span><br><span class="line">git commit -m &#x27;xxx&#x27;                                       # 提交 </span><br><span class="line">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改） </span><br><span class="line">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步 </span><br><span class="line">git rm xxx                                                # 删除index中的文件 </span><br><span class="line">git rm -r *                                               # 递归删除 </span><br><span class="line">git log                                                   # 显示提交日志 </span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行 </span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件 </span><br><span class="line">git log -p -m </span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容 </span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位 </span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志 </span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本 </span><br><span class="line">git tag                                                   # 显示已存在的tag </span><br><span class="line">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag </span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容 </span><br><span class="line">git log v2.0                                              # 显示v2.0的日志 </span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更 </span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更 </span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异 </span><br><span class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异 </span><br><span class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的 </span><br><span class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容 </span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch） </span><br><span class="line">git branch                                                # 显示本地分支 </span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支 </span><br><span class="line">git branch -a                                             # 显示所有分支 </span><br><span class="line">git branch -r                                             # 显示所有原创分支 </span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支 </span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支 </span><br><span class="line">git branch -m master master_copy                          # 本地分支改名 </span><br><span class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出 </span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版 </span><br><span class="line">git checkout features/performance                         # 检出已存在的features/performance分支 </span><br><span class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出 </span><br><span class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退） </span><br><span class="line">git merge origin/master                                   # 合并远程master分支至当前分支 </span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改 </span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支 </span><br><span class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支 </span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库 </span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge） </span><br><span class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支 </span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支 </span><br><span class="line">git mv README README2                                     # 重命名文件README为README2 </span><br><span class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退） </span><br><span class="line">git rebase </span><br><span class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支） </span><br><span class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933 </span><br><span class="line">git ls-files                                              # 列出git index包含的文件 </span><br><span class="line">git show-branch                                           # 图示当前分支历史 </span><br><span class="line">git show-branch --all                                     # 图示所有分支历史 </span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改 </span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818 </span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象 </span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH </span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点 </span><br><span class="line">git show HEAD@&#123;5&#125; </span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态 </span><br><span class="line">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志 </span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476 </span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态 </span><br><span class="line">git stash list                                            # 查看所有暂存 </span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存 </span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存 </span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from” </span><br><span class="line">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT </span><br><span class="line">git gc </span><br><span class="line">git fsck</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。</span><br><span class="line"></span><br><span class="line">Git常用操作命令：</span><br><span class="line"></span><br><span class="line">1) 远程仓库相关命令</span><br><span class="line"></span><br><span class="line">检出仓库：$ git clone git://github.com/jquery/jquery.git</span><br><span class="line"></span><br><span class="line">查看远程仓库：$ git remote -v</span><br><span class="line"></span><br><span class="line">添加远程仓库：$ git remote add [name] [url]</span><br><span class="line"></span><br><span class="line">删除远程仓库：$ git remote rm [name]</span><br><span class="line"></span><br><span class="line">修改远程仓库：$ git remote set-url --push [name] [newUrl]</span><br><span class="line"></span><br><span class="line">拉取远程仓库：$ git pull [remoteName] [localBranchName]</span><br><span class="line"></span><br><span class="line">推送远程仓库：$ git push [remoteName] [localBranchName]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</span><br><span class="line"></span><br><span class="line">$git push origin test:master         // 提交本地test分支作为远程的master分支</span><br><span class="line"></span><br><span class="line">$git push origin test:test              // 提交本地test分支作为远程的test分支</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2）分支(branch)操作相关命令</span><br><span class="line"></span><br><span class="line">查看本地分支：$ git branch</span><br><span class="line"></span><br><span class="line">查看远程分支：$ git branch -r</span><br><span class="line"></span><br><span class="line">创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支</span><br><span class="line"></span><br><span class="line">切换分支：$ git checkout [name]</span><br><span class="line"></span><br><span class="line">创建新分支并立即切换到新分支：$ git checkout -b [name]</span><br><span class="line"></span><br><span class="line">删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</span><br><span class="line"></span><br><span class="line">合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并</span><br><span class="line"></span><br><span class="line">创建远程分支(本地分支push到远程)：$ git push origin [name]</span><br><span class="line"></span><br><span class="line">删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</span><br><span class="line"></span><br><span class="line">$git symbolic-ref HEAD refs/heads/[name]</span><br><span class="line"></span><br><span class="line">$rm .git/index</span><br><span class="line"></span><br><span class="line">$git clean -fdx</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">3）版本(tag)操作相关命令</span><br><span class="line"></span><br><span class="line">查看版本：$ git tag</span><br><span class="line"></span><br><span class="line">创建版本：$ git tag [name]</span><br><span class="line"></span><br><span class="line">删除版本：$ git tag -d [name]</span><br><span class="line"></span><br><span class="line">查看远程版本：$ git tag -r</span><br><span class="line"></span><br><span class="line">创建远程版本(本地版本push到远程)：$ git push origin [name]</span><br><span class="line"></span><br><span class="line">删除远程版本：$ git push origin :refs/tags/[name]</span><br><span class="line"></span><br><span class="line">合并远程仓库的tag到本地：$ git pull origin --tags</span><br><span class="line"></span><br><span class="line">上传本地tag到远程仓库：$ git push origin --tags</span><br><span class="line"></span><br><span class="line">创建带注释的tag：$ git tag -a [name] -m &#x27;yourMessage&#x27;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">4) 子模块(submodule)相关操作命令</span><br><span class="line"></span><br><span class="line">添加子模块：$ git submodule add [url] [path]</span><br><span class="line"></span><br><span class="line">   如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</span><br><span class="line"></span><br><span class="line">初始化子模块：$ git submodule init  ----只在首次检出仓库时运行一次就行</span><br><span class="line"></span><br><span class="line">更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下</span><br><span class="line"></span><br><span class="line">删除子模块：（分4步走哦）</span><br><span class="line"></span><br><span class="line"> 1) $ git rm --cached [path]</span><br><span class="line"></span><br><span class="line"> 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</span><br><span class="line"></span><br><span class="line"> 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉</span><br><span class="line"></span><br><span class="line"> 4) 手动删除子模块残留的目录</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">5）忽略一些文件、文件夹不提交</span><br><span class="line"></span><br><span class="line">在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如</span><br><span class="line"></span><br><span class="line">target</span><br><span class="line"></span><br><span class="line">bin</span><br><span class="line"></span><br><span class="line">*.db</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">Git 常用命令</span><br><span class="line"></span><br><span class="line">git branch 查看本地所有分支</span><br><span class="line">git status 查看当前状态 </span><br><span class="line">git commit 提交 </span><br><span class="line">git branch -a 查看所有的分支</span><br><span class="line">git branch -r 查看本地所有分支</span><br><span class="line">git commit -am &quot;init&quot; 提交并且加注释 </span><br><span class="line">git remote add origin git@192.168.1.119:ndshow</span><br><span class="line">git push origin master 将文件给推到服务器上 </span><br><span class="line">git remote show origin 显示远程库origin里的资源 </span><br><span class="line">git push origin master:develop</span><br><span class="line">git push origin master:hb-dev 将本地库与服务器上的库进行关联 </span><br><span class="line">git checkout --track origin/dev 切换到远程dev分支</span><br><span class="line">git branch -D master develop 删除本地库develop</span><br><span class="line">git checkout -b dev 建立一个新的本地分支dev</span><br><span class="line">git merge origin/dev 将分支dev与当前分支进行合并</span><br><span class="line">git checkout dev 切换到本地dev分支</span><br><span class="line">git remote show 查看远程库</span><br><span class="line">git add .</span><br><span class="line">git rm 文件名(包括路径) 从git中删除指定文件</span><br><span class="line">git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来</span><br><span class="line">git config --list 看所有用户</span><br><span class="line">git ls-files 看已经被提交的</span><br><span class="line">git rm [file name] 删除一个文件</span><br><span class="line">git commit -a 提交当前repos的所有的改变</span><br><span class="line">git add [file name] 添加一个文件到git index</span><br><span class="line">git commit -v 当你用－v参数的时候可以看commit的差异</span><br><span class="line">git commit -m &quot;This is the message describing the commit&quot; 添加commit信息</span><br><span class="line">git commit -a -a是代表add，把所有的change加到git index里然后再commit</span><br><span class="line">git commit -a -v 一般提交命令</span><br><span class="line">git log 看你commit的日志</span><br><span class="line">git diff 查看尚未暂存的更新</span><br><span class="line">git rm a.a 移除文件(从暂存区和工作区中删除)</span><br><span class="line">git rm --cached a.a 移除文件(只从暂存区中删除)</span><br><span class="line">git commit -m &quot;remove&quot; 移除文件(从Git中删除)</span><br><span class="line">git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</span><br><span class="line">git diff --cached 或 $ git diff --staged 查看尚未提交的更新</span><br><span class="line">git stash push 将文件给push到一个临时空间中</span><br><span class="line">git stash pop 将文件从临时空间pop下来</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">git remote add origin git@github.com:username/Hello-World.git</span><br><span class="line">git push origin master 将本地项目给提交到服务器中</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">git pull 本地与服务器端同步</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</span><br><span class="line">git push origin serverfix:awesomebranch</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">git fetch 相当于是从远程获取最新版本到本地，不会自动merge</span><br><span class="line">git commit -a -m &quot;log_message&quot; (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</span><br><span class="line">git branch branch_0.1 master 从主分支master创建branch_0.1分支</span><br><span class="line">git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</span><br><span class="line">git checkout branch_1.0/master 切换到branch_1.0/master分支</span><br><span class="line">du -hs</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/.cn//Blog\source_posts\Git-学习笔记\20180620113451746.png" alt="Git命令导图"></p>
<p>贴在这里，方便之后查找，需要学习的话还是去<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a>。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博文</title>
    <url>/2021/10/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
    <content><![CDATA[<p>历时三天，终于搭建好了我的个人博客</p>
<span id="more"></span>

<h2 id="先说说搭建历程吧。"><a href="#先说说搭建历程吧。" class="headerlink" title="先说说搭建历程吧。"></a>先说说搭建历程吧。</h2><p>其实早在去年就已经开始了，去年国庆七天都在搭建</p>
<p>无奈不会Git指令，只能按部就班的复制粘贴，报错也不懂</p>
<p>最后虽然搭建好了，但是没有找到合适的主题</p>
<p>最开始想用buttfly，但是去年的时候butterfly刚刚更新，不支持</p>
<p>html语法，教程比较少，初学者不太适合。</p>
<p>后来找到了volantis的主题，深得我心，但是由于是初学者，看不懂官</p>
<p>方文档，就退而求其次，使用了最为广泛的next主题，next。</p>
<p>next主题时使用最为广泛的，各种报错的处理方案网上都很齐全</p>
<p>但是在配置好next主题之后，我发现我看懂volantis的官方文档了，</p>
<p>历时三天，配置好了next，volantis又要用多久，就有点懒了，就只用next吧，下一步有更多需求的时候</p>
<p>再更换主题，yysy，next是真的<del>豪华</del></p>
<p>废话不多说，我的过程就都写在下面了。</p>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p>搭建一个博客，最重要的是耐心，他可能会有很多报错，看不懂，遇到问题要自己去解决，有些甚至会一天都解决不了，但是得有耐心。</p>
<p>我使用的是Github+hexo搭建博客。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程</a>（廖雪峰老师yyds）</p>
<h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h3><p>打开<a href="https://github.com/">GitHub官网</a></p>
<p>之后按部就班，最后登录GitHub.</p>
<h3 id="初始化ssh"><a href="#初始化ssh" class="headerlink" title="初始化ssh"></a>初始化ssh</h3><p>要用git上传文件到GitHub首先就要使用SSH登录远程主机，新建一个blog文件夹，打开目录后右击，git bash here 输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>windows系统默认生成在C:/Users/个人用户名/.ssh目录下</p>
<p>打开id_rsa.pub文件，复制</p>
<p>打开Github，点击右上角settings，在左侧边栏找到SSH and GPG keys</p>
<p>添加ssh，就默认本台电脑可以往Github账户上上传文件，如果需要有其他电脑可以添加多个ssh</p>
<p>在git界面输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>第一次会跳出一个问题，填yes就可以</p>
<p>然后就会显示绑定成功</p>
<h3 id="购买域名（非必须）"><a href="#购买域名（非必须）" class="headerlink" title="购买域名（非必须）"></a>购买域名（非必须）</h3><p>如果想让自己的域名看起来高大上，可以去万网，腾讯云等网站购买域名，我是在腾讯云购买的，登录后点控制台，点域名，然后搜索自己想要的，选择合适的价格直接购买就可以，上面写的等待三到五天，实际上十几分钟就可以</p>
<p>4.安装<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p>
<p>直接安装就可以，完成后在cmd界面输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>查看是否安装成功</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在Github上创建一个仓库，点击右上角加号，new repo,</p>
<p>然后仓库名称格式为“你的用户名.github.io”,勾选Initialize this repository with a README。</p>
<p>然后在Blog文件夹下点击Git bash here，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>再初始化博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>然后输入如下口令，静态部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>这个时候网页已经部署完成，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>即可在本地查看<a href="http://localhost:4000/">页面</a></p>
<p>看完之后ctrl + c 停止运行服务器</p>
<p>现在回到Blog文件夹，打开_config.yml文件</p>
<p>下滑到文件底部，填上如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/jokers/jokers-jk.github.io.git  #你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意空格 html语法比较严格，冒号后有一个空格，如果错误会导致报错。</p>
<p>在Blog文件夹中，打开Git Bash，输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后分别输入以下三条指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure>

<p>完成之后，打开浏览器，输入<a href="https://xxx.github.io就可以打开你的网页了./">https://xxx.github.io就可以打开你的网页了。</a></p>
<h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><h4 id="登录腾讯云（本人使用这个购买域名）"><a href="#登录腾讯云（本人使用这个购买域名）" class="headerlink" title="登录腾讯云（本人使用这个购买域名）"></a>登录腾讯云（本人使用这个购买域名）</h4><p>点击控制台，在购买的域名后点击解析，添加两条解析记录</p>
<p>主机记录 www 和 @ ，分别对应记录类型 CNAME 和 A （注意：要对应）</p>
<p>记录值填入本人的网站初始域名即可</p>
<h4 id="打开Blog的source文件"><a href="#打开Blog的source文件" class="headerlink" title="打开Blog的source文件"></a>打开Blog的source文件</h4><p>添加CNAME文件，自己创建，填入自己的域名 如：jokersrealm.cn</p>
<p>不要加www，否则每次访问都要加www。</p>
<h4 id="部署到远端"><a href="#部署到远端" class="headerlink" title="部署到远端"></a>部署到远端</h4><p>在Blog文件夹，打开Git Bash ，输入三条指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h4 id="打开Github"><a href="#打开Github" class="headerlink" title="打开Github"></a>打开Github</h4><p>查看本仓库中是否有CNAME文件</p>
<p>在GitHub Pages 中查看网址是否已经保存，即可</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有主题的设置等等，大家这部分可以在网上找一些资源</p>
<p>我开始觉得视频比文字更加通俗易懂，这就和老师上课讲和自己预习一个道理，</p>
<p>书上的难免会有遗漏，但是搭建博客这个东西，我感觉文字教程更好一些，</p>
<p>因为不知道每个人的进度，视频教学部分内容太快或者太慢，初学者来回播放</p>
<p>不容易观看，甚至不会贴出一些常见问题。</p>
<h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><p>在部署的过程中，我也不是一帆风顺的，也有过很多报错。</p>
<p>其中让我第一次搭建失败的错误我就贴在这里了，印象深刻</p>
<p>Git往仓库上传文件的时候，是会对比远程仓库和本地仓库的，hexo d</p>
<p>是往远程仓库库推送的指令，当本地没有README，CNAME文件时，就算你在</p>
<p>Github仓库创建这些文件，每一次推送都会在远程库删除这些文件，而没有这些</p>
<p>文件，Github是会警告甚至报错的。</p>
<p>这个错误由于我第一次没有学习Git的使用，导致我不是很清楚，所以在这里推荐</p>
<p>大家先学习廖雪峰老师的Git教程</p>
<h2 id="网络资源"><a href="#网络资源" class="headerlink" title="网络资源"></a>网络资源</h2><p>知乎：<a href="https://zhuanlan.zhihu.com/p/102592286">如何搭建个人博客</a></p>
<p>可能有些人还是喜欢视频教程，在这里我也贴出来了</p>
<p>Bilibili：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?t=1007">搭建个人博客</a></p>
<p>以及我念念不忘的<a href="https://volantis.js.org/page-settings/front-matter/">volantis主题</a>。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>最最最重要的是，每隔一段时间操作完成之后一定要备份，不然不小心修改一个地方报错改不了之后</p>
<p>从头开始可是很悲剧的！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
